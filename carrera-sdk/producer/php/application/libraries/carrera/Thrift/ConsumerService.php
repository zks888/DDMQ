<?php

namespace didi\carrera\consumer\proxy;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */

use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ConsumerServiceIf
{
    /**
     * @param \didi\carrera\consumer\proxy\PullRequest $request
     * @return \didi\carrera\consumer\proxy\PullResponse
     */
    public function pull(\didi\carrera\consumer\proxy\PullRequest $request);

    /**
     * @param \didi\carrera\consumer\proxy\ConsumeResult $result
     * @return boolean
     */
    public function submit(\didi\carrera\consumer\proxy\ConsumeResult $result);

    /**
     * @param \didi\carrera\consumer\proxy\ConsumeStatsRequest $request
     * @return \didi\carrera\consumer\proxy\ConsumeStats[]
     */
    public function getConsumeStats(\didi\carrera\consumer\proxy\ConsumeStatsRequest $request);

    /**
     * @param \didi\carrera\consumer\proxy\FetchRequest $request
     * @return \didi\carrera\consumer\proxy\FetchResponse
     */
    public function fetch(\didi\carrera\consumer\proxy\FetchRequest $request);

    /**
     * @param \didi\carrera\consumer\proxy\AckResult $result
     * @return boolean
     */
    public function ack(\didi\carrera\consumer\proxy\AckResult $result);
}

class ConsumerServiceClient implements \didi\carrera\consumer\proxy\ConsumerServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }

    public function pull(\didi\carrera\consumer\proxy\PullRequest $request)
    {
        $this->send_pull($request);
        return $this->recv_pull();
    }

    public function send_pull(\didi\carrera\consumer\proxy\PullRequest $request)
    {
        $args = new \didi\carrera\consumer\proxy\ConsumerService_pull_args();
        $args->request = $request;
        $this->send_base("pull", $args);
    }

    public function recv_pull()
    {
        $result = new \didi\carrera\consumer\proxy\ConsumerService_pull_result();
        return $this->receive_base($result, "pull");
    }

    public function submit(\didi\carrera\consumer\proxy\ConsumeResult $result)
    {
        $this->send_submit($result);
        return $this->recv_submit();
    }

    public function send_submit(\didi\carrera\consumer\proxy\ConsumeResult $result)
    {
        $args = new \didi\carrera\consumer\proxy\ConsumerService_submit_args();
        $args->result($result);
        $this->send_base("submit", $args);
    }

    public function recv_submit()
    {
        $result = new \didi\carrera\consumer\proxy\ConsumerService_submit_result();
        return $this->receive_base($result, "submit");
    }

    public function getConsumeStats(\didi\carrera\consumer\proxy\ConsumeStatsRequest $request)
    {
        $this->send_getConsumeStats($request);
        return $this->recv_getConsumeStats();
    }

    public function send_getConsumeStats(\didi\carrera\consumer\proxy\ConsumeStatsRequest $request)
    {
        $args = new \didi\carrera\consumer\proxy\ConsumerService_getConsumeStats_args();
        $args->request = $request;
        $this->send_base("getConsumeStats", $args);
    }

    public function recv_getConsumeStats()
    {
        $result = new \didi\carrera\consumer\proxy\ConsumerService_getConsumeStats_result();
        return $this->receive_base($result, "getConsumeStats");
    }

    public function fetch(\didi\carrera\consumer\proxy\FetchRequest $request)
    {
        $this->send_fetch($request);
        return $this->recv_fetch();
    }

    public function send_fetch(\didi\carrera\consumer\proxy\FetchRequest $request)
    {
        $args = new \didi\carrera\consumer\proxy\ConsumerService_fetch_args();
        $args->request = $request;
        $this->send_base("fetch", $args);
    }

    public function recv_fetch()
    {
        $result = new \didi\carrera\consumer\proxy\ConsumerService_fetch_result();
        return $this->receive_base($result, "fetch");
    }

    public function ack(\didi\carrera\consumer\proxy\AckResult $result)
    {
        $this->send_ack($result);
        return $this->recv_ack();
    }

    public function send_ack(\didi\carrera\consumer\proxy\AckResult $result)
    {
        $args = new \didi\carrera\consumer\proxy\ConsumerService_ack_args();
        $args->result = $result;
        $this->send_base("ack", $args);
    }

    public function recv_ack()
    {
        $result = new \didi\carrera\consumer\proxy\ConsumerService_ack_result();
        return $this->receive_base($result, "ack");
    }

    public function send_base($cmd, $args)
    {
        $this->output_->writeMessageBegin($cmd, TMessageType::CALL, $this->seqid_);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
    }

    public function receive_base($result, $cmd)
    {
        $rseqid = 0;
        $fname = null;
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == TMessageType::EXCEPTION) {
            $x = new TApplicationException();
            $x->read($this->input_);
            $this->input_->readMessageEnd();
            throw $x;
        }
        $result->read($this->input_);
        $this->input_->readMessageEnd();

        if ($result->success !== null) {
            return $result->success;
        }
        throw new \Exception("$cmd failed: unknown result");
    }
}

// HELPER FUNCTIONS AND STRUCTURES

class ConsumerService_pull_args
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Message
     */
    public $message = null;
    /**
     * @var int
     */
    public $timeout = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'message',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Message',
                ),
                2 => array(
                    'var' => 'timeout',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendSync_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->message = new \didi\carrera\consumer\proxy\Message();
                        $xfer += $this->message->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendSync_args');
        if ($this->message !== null) {
            if (!is_object($this->message)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
            $xfer += $this->message->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I64, 2);
            $xfer += $output->writeI64($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_pull_result
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Result
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Result',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendSync_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \didi\carrera\consumer\proxy\Result();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendSync_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_submit_args
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Message[]
     */
    public $messages = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'messages',
                    'type' => TType::LST,
                    'etype' => TType::STRUCT,
                    'elem' => array(
                        'type' => TType::STRUCT,
                        'class' => '\didi\carrera\consumer\proxy\Message',
                    ),
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['messages'])) {
                $this->messages = $vals['messages'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendBatchSync_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::LST) {
                        $this->messages = array();
                        $_size18 = 0;
                        $_etype21 = 0;
                        $xfer += $input->readListBegin($_etype21, $_size18);
                        for ($_i22 = 0; $_i22 < $_size18; ++$_i22) {
                            $elem23 = null;
                            $elem23 = new \didi\carrera\consumer\proxy\Message();
                            $xfer += $elem23->read($input);
                            $this->messages [] = $elem23;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendBatchSync_args');
        if ($this->messages !== null) {
            if (!is_array($this->messages)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('messages', TType::LST, 1);
            {
                $output->writeListBegin(TType::STRUCT, count($this->messages));
                {
                    foreach ($this->messages as $iter24) {
                        $xfer += $iter24->write($output);
                    }
                }
                $output->writeListEnd();
            }
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_submit_result
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Result
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Result',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendBatchSync_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \didi\carrera\consumer\proxy\Result();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendBatchSync_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_getConsumeStats_args
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Message
     */
    public $message = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'message',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Message',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['message'])) {
                $this->message = $vals['message'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendAsync_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->message = new \didi\carrera\consumer\proxy\Message();
                        $xfer += $this->message->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendAsync_args');
        if ($this->message !== null) {
            if (!is_object($this->message)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('message', TType::STRUCT, 1);
            $xfer += $this->message->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_getConsumeStats_result
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Result
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Result',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendAsync_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \didi\carrera\consumer\proxy\Result();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendAsync_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_fetch_args
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Notify
     */
    public $notify = null;
    /**
     * @var int
     */
    public $timeout = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'notify',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Notify',
                ),
                2 => array(
                    'var' => 'timeout',
                    'type' => TType::I64,
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['notify'])) {
                $this->notify = $vals['notify'];
            }
            if (isset($vals['timeout'])) {
                $this->timeout = $vals['timeout'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendNotifySync_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->notify = new \didi\carrera\consumer\proxy\Notify();
                        $xfer += $this->notify->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->timeout);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendNotifySync_args');
        if ($this->notify !== null) {
            if (!is_object($this->notify)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notify', TType::STRUCT, 1);
            $xfer += $this->notify->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->timeout !== null) {
            $xfer += $output->writeFieldBegin('timeout', TType::I64, 2);
            $xfer += $output->writeI64($this->timeout);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_fetch_result
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Result
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Result',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendNotifySync_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \didi\carrera\consumer\proxy\Result();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendNotifySync_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_ack_args
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Notify
     */
    public $notify = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                1 => array(
                    'var' => 'notify',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Notify',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['notify'])) {
                $this->notify = $vals['notify'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendNotifyAsync_args';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->notify = new \didi\carrera\consumer\proxy\Notify();
                        $xfer += $this->notify->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendNotifyAsync_args');
        if ($this->notify !== null) {
            if (!is_object($this->notify)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('notify', TType::STRUCT, 1);
            $xfer += $this->notify->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}

class ConsumerService_ack_result
{
    static $_TSPEC;

    /**
     * @var \didi\carrera\consumer\proxy\Result
     */
    public $success = null;

    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(
                0 => array(
                    'var' => 'success',
                    'type' => TType::STRUCT,
                    'class' => '\didi\carrera\consumer\proxy\Result',
                ),
            );
        }
        if (is_array($vals)) {
            if (isset($vals['success'])) {
                $this->success = $vals['success'];
            }
        }
    }

    public function getName()
    {
        return 'ProducerService_sendNotifyAsync_result';
    }

    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 0:
                    if ($ftype == TType::STRUCT) {
                        $this->success = new \didi\carrera\consumer\proxy\Result();
                        $xfer += $this->success->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ProducerService_sendNotifyAsync_result');
        if ($this->success !== null) {
            if (!is_object($this->success)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
            $xfer += $this->success->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }

}


